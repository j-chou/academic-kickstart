beta <- 2.5
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -2 * w + 3 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
lr_mod <- lm(y ~ x, data = df)
lr_mod
beta <- 4
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -2 * w + 3 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
lr_mod <- lm(y ~ x, data = df)
lr_mod
require(tidyverse)
n <- 1000
beta <- 2.5
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -2 * w + 3 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
lr_mod <- lm(y ~ x, data = df)
lr_mod
lr_mod$coefficients[, 'x']
lr_mod$coefficients['x']
lr_est <- lr_mod$coefficients['x']
yz_mod <- lm(y ~ z, data = df)
xz_mod <- lm(x ~ z, data = df)
require(tidyverse)
n <- 1000
beta <- 2.5
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -2 * w + 3 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
lr_mod <- lm(y ~ x, data = df)
lr_est <- lr_mod$coefficients['x']
yz_mod <- lm(y ~ z, data = df)
xz_mod <- lm(x ~ z, data = df)
iv_est <- yz_mod$coefficients[2]/xz_mod$coefficients[2]
iv_est
lr_est
require(tidyverse)
n <- 1000
beta <- 2.5
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -2 * w + 8 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
lr_mod <- lm(y ~ x, data = df)
lr_est <- lr_mod$coefficients['x']
yz_mod <- lm(y ~ z, data = df)
xz_mod <- lm(x ~ z, data = df)
iv_est <- yz_mod$coefficients[2]/xz_mod$coefficients[2]
iv_est
lr_est
require(tidyverse)
n <- 1000
beta <- 2.5
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -8 * w + 4 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
lr_mod <- lm(y ~ x, data = df)
lr_est <- lr_mod$coefficients['x']
yz_mod <- lm(y ~ z, data = df)
xz_mod <- lm(x ~ z, data = df)
iv_est <- yz_mod$coefficients[2]/xz_mod$coefficients[2]
iv_est
lr_est
require(tidyverse)
n <- 1000
beta <- 2.5
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -20 * w + 4 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
lr_mod <- lm(y ~ x, data = df)
lr_est <- lr_mod$coefficients['x']
yz_mod <- lm(y ~ z, data = df)
xz_mod <- lm(x ~ z, data = df)
iv_est <- yz_mod$coefficients[2]/xz_mod$coefficients[2]
iv_est
lr_est
require(tidyverse)
n <- 1000
beta <- 2.5
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -8 * w + 4 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
lr_mod <- lm(y ~ x, data = df)
lr_est <- lr_mod$coefficients['x']
yz_mod <- lm(y ~ z, data = df)
xz_mod <- lm(x ~ z, data = df)
iv_est <- yz_mod$coefficients[2]/xz_mod$coefficients[2]
iv_est
lr_est
require(tidyverse)
n <- 1000
beta <- 2.5
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -8 * w + 4 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
lr_mod <- lm(y ~ x, data = df)
lr_est <- lr_mod$coefficients['x']
yz_mod <- lm(y ~ z, data = df)
xz_mod <- lm(x ~ z, data = df)
iv_est <- yz_mod$coefficients[2]/xz_mod$coefficients[2]
iv_est
lr_est
# What happens if I treat the IV as a confounder?
# What happens if I treat the IV as a confounder?
mod_confound <- lm(y ~ x + w + z, data = df)
mod_confound_est <- mod_confound$coefficients['x']
mod_confound_est
mod <- lm(y ~ x + w, data = df)
mod$coefficients['x']
for (i in 1:n_trials){
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -8 * w + 4 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
mod_confound <- lm(y ~ x + w + z, data = df)
confound_estimates[i] <- mod_confound$coefficients['x']
}
n_trials <- 1000
confound_estimates <- rep(0, n_trials)
n <- 1000
beta <- 2.5
for (i in 1:n_trials){
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -8 * w + 4 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
mod_confound <- lm(y ~ x + w + z, data = df)
confound_estimates[i] <- mod_confound$coefficients['x']
}
hist(confound_estimates)
summary(confound_estimates)
mod_confound <- lm(y ~ x + w, data = df)
mod_confound_est <- mod_confound$coefficients['x']
mod_confound_est
mod <- lm(y ~ x + w, data = df)
mod$coefficients['x']
n_trials <- 1000
confound_estimates <- rep(0, n_trials)
n <- 1000
beta <- 2.5
for (i in 1:n_trials){
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -8 * w + 20 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
mod_confound <- lm(y ~ x + w + z, data = df)
confound_estimates[i] <- mod_confound$coefficients['x']
}
hist(confound_estimates)
summary(confound_estimates)
mod_confound <- lm(y ~ x + z, data = df)
n_trials <- 1000
confound_estimates <- rep(0, n_trials)
n <- 1000
beta <- 2.5
for (i in 1:n_trials){
w <- rnorm(n, -4, 1)
z <- rnorm(n, 2, 3)
x <- -8 * w + 20 * z + rnorm(n, 0, 1)
y <- beta * x + 5 * w + rnorm(n, 0, 1)
df <- data.frame('w' = w, 'z' = z, 'x' = x, 'y' = y)
mod_confound <- lm(y ~ x + z, data = df)
confound_estimates[i] <- mod_confound$coefficients['x']
}
hist(confound_estimates)
summary(confound_estimates)
blogdown:::serve_site()
# Simulate an unobserved confounder
require(tidyverse)
require(scales)
require(viridis)
require(latex2exp)
options(scipen = 999)
install.packages(c(''))
install.packages(c('viridis', 'latex2exp'))
# Simulate an unobserved confounder
require(tidyverse)
require(scales)
require(viridis)
require(latex2exp)
options(scipen = 999)
setwd('~/Desktop/research/')
###############################
strengths <- seq(0, 20, 0.1)
num_rows <- length(strengths)^2
output <- data.frame('beta' = rep(0, num_rows),
'alpha1' = rep(0, num_rows),
'alpha2' = rep(0, num_rows),
'estimate' = rep(0, num_rows))
nrow(output)
for (i in 1:length(strengths)){
for (j in 1:length(strengths)){
n <- 1000
beta <- 1
alpha1 <- strengths[i]
alpha2 <- strengths[j]
w <- rnorm(n, 0, 1)
x <- alpha2*w + runif(n, 0, 1)
y <- beta*x + alpha1*w + runif(n, 0, 1)
df <- data.frame('y' = y,
'x' = x,
'w' = w)
mod <- lm(y ~ x, data = df)
output[(i-1)*length(strengths) + j, ] <- c(beta, alpha1, alpha2, mod$coefficients[2])
}
}
g_linear <- output %>%
ggplot(aes(x = alpha1, y = alpha2, fill = abs(beta - estimate))) +
geom_tile() +
scale_fill_viridis(option = 'magma') +
scale_x_continuous(breaks = pretty_breaks(n = 20)) +
scale_y_continuous(breaks = pretty_breaks(n = 20)) +
theme_gdocs() +
guides(fill = guide_legend(title="Bias")) +
labs(x = TeX('$\\alpha_1$'), y = TeX('$\\alpha_2$'), title = 'ATE estimate bias due to unobserved linear confounding',
subtitle = TeX('The true model is $y = x + \\alpha_1 w + \\epsilon_1$ and $x = \\alpha_2 w + \\epsilon_2$ where $\\epsilon_1$, $\\epsilon_2$ are Gaussian noise with mean 0.'))
g_linear
install.packages('ggthemes')
blogdown:::serve_site()
install.packages('blogdown')
blogdown:::serve_site()
output %>% filter(alpha2 %in% seq(0, 20, 1)) %>%
ggplot(aes(x = alpha1, y = beta - estimate, color = factor(alpha2))) +
geom_line() +
theme_gdocs() +
scale_y_continuous(breaks = pretty_breaks(n = 10))
# Simulate an unobserved confounder
require(tidyverse)
require(tidyverse)
require(scales)
require(viridis)
require(latex2exp)
require(ggthemes)
options(scipen = 999)
setwd('~/Desktop/research/')
strengths <- seq(0, 15, 0.1)
num_rows <- length(strengths)^2
output <- data.frame('beta' = rep(0, num_rows),
'alpha1' = rep(0, num_rows),
'alpha2' = rep(0, num_rows),
'estimate' = rep(0, num_rows))
nrow(output)
for (i in 1:length(strengths)){
for (j in 1:length(strengths)){
n <- 1000
beta <- 1
alpha1 <- strengths[i]
alpha2 <- strengths[j]
w <- rnorm(n, 0, 1)
x <- alpha2*w + rnorm(n, 0, 1)
y <- beta*x + alpha1*w + rnorm(n, 0, 1)
df <- data.frame('y' = y,
'x' = x,
'w' = w)
mod <- lm(y ~ x, data = df)
output[(i-1)*length(strengths) + j, ] <- c(beta, alpha1, alpha2, mod$coefficients[2])
}
}
g_linear <- output %>%
ggplot(aes(x = alpha1, y = alpha2, fill = abs(beta - estimate))) +
geom_tile() +
scale_fill_viridis(option = 'magma') +
scale_x_continuous(breaks = pretty_breaks(n = 20)) +
scale_y_continuous(breaks = pretty_breaks(n = 20)) +
theme_gdocs() +
guides(fill = guide_legend(title="Bias")) +
labs(x = TeX('$\\alpha_1$'), y = TeX('$\\alpha_2$'), title = 'ATE estimate bias due to unobserved linear confounding',
subtitle = TeX('The true model is $y = x + \\alpha_1 w + \\epsilon_1$ and $x = \\alpha_2 w + \\epsilon_2$ where $\\epsilon_1$, $\\epsilon_2$ are Gaussian noise with mean 0 and variance 1.'))
g_linear
output %>% filter(alpha2 %in% seq(0, 20, 1)) %>%
ggplot(aes(x = alpha1, y = beta - estimate, color = factor(alpha2))) +
geom_line() +
theme_gdocs() +
scale_y_continuous(breaks = pretty_breaks(n = 10))
output %>% filter(alpha1 %in% seq(1, 10, 1)) %>%
ggplot(aes(x = alpha2, y = beta - estimate, color = factor(alpha1))) +
geom_line() +
theme_gdocs() +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(breaks = pretty_breaks(n = 10)) +
labs(x = TeX('$\\alpha_1$', y = 'Bias')) +
guides(fill = guide_legend(title = TeX('$\\alpha_2$')))
output %>% filter(alpha1 %in% seq(1, 10, 1)) %>%
ggplot(aes(x = alpha2, y = beta - estimate, color = factor(alpha1))) +
geom_line() +
theme_gdocs() +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(breaks = pretty_breaks(n = 10)) +
labs(x = TeX('$\\alpha_1$'), y = 'Bias') +
guides(fill = guide_legend(title = TeX('$\\alpha_2$')))
output %>% filter(alpha2 %in% seq(0, 20, 1)) %>%
ggplot(aes(x = alpha1, y = beta - estimate, color = factor(alpha2))) +
geom_line() +
theme_gdocs() +
scale_y_continuous(breaks = pretty_breaks(n = 10)) +
labs(x = TeX('$\\alpha_1$'), y = 'Bias') +
guides(fill = guide_legend(title = TeX('$\\alpha_2$')))
output %>% filter(alpha2 %in% seq(0, 20, 1)) %>%
ggplot(aes(x = alpha1, y = beta - estimate, color = factor(alpha2))) +
geom_line() +
theme_gdocs() +
scale_y_continuous(breaks = pretty_breaks(n = 10)) +
labs(x = TeX('$\\alpha_1$'), y = 'Bias') +
guides(color = guide_legend(title = TeX('$\\alpha_2$')))
ggsave('bias_linear_confounding_alpha1_20190822.png', dpi = 300, units = 'in', width = 10, height = 8)
getwd()
output %>% filter(alpha1 %in% seq(1, 10, 1)) %>%
ggplot(aes(x = alpha2, y = beta - estimate, color = factor(alpha1))) +
geom_line() +
theme_gdocs() +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(breaks = pretty_breaks(n = 10))
output %>% filter(alpha1 %in% seq(1, 10, 1)) %>%
ggplot(aes(x = alpha2, y = beta - estimate, color = factor(alpha1))) +
geom_line() +
theme_gdocs() +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(breaks = pretty_breaks(n = 10)) +
labs(x = TeX('$\\alpha_2$'), y = 'Bias') +
guides(color = guide_legend(title = TeX('$\\alpha_1$')))
g_linear_2 <- output %>% filter(alpha1 %in% seq(1, 10, 1)) %>%
ggplot(aes(x = alpha2, y = beta - estimate, color = factor(alpha1))) +
geom_line() +
theme_gdocs() +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(breaks = pretty_breaks(n = 10)) +
labs(x = TeX('$\\alpha_2$'), y = 'Bias') +
guides(color = guide_legend(title = TeX('$\\alpha_1$')))
install.packages('gridExtra')
install.packages("gridExtra")
require(gridextra)
require(gridExtra)
g_linear_1 <- output %>% filter(alpha2 %in% seq(0, 20, 1)) %>%
ggplot(aes(x = alpha1, y = beta - estimate, color = factor(alpha2))) +
geom_line() +
theme_gdocs() +
scale_y_continuous(breaks = pretty_breaks(n = 10)) +
labs(x = TeX('$\\alpha_1$'), y = 'Bias') +
guides(color = guide_legend(title = TeX('$\\alpha_2$')))
# Simulate an unobserved confounder
require(tidyverse)
require(scales)
require(viridis)
require(latex2exp)
require(ggthemes)
require(gridExtra)
options(scipen = 999)
setwd('~/Desktop/research/')
g_linear_1 <- output %>% filter(alpha2 %in% seq(0, 20, 1)) %>%
ggplot(aes(x = alpha1, y = beta - estimate, color = factor(alpha2))) +
geom_line() +
theme_gdocs() +
scale_y_continuous(breaks = pretty_breaks(n = 10)) +
labs(x = TeX('$\\alpha_1$'), y = 'Bias') +
guides(color = guide_legend(title = TeX('$\\alpha_2$')))
g_linear_2 <- output %>% filter(alpha1 %in% seq(1, 10, 1)) %>%
ggplot(aes(x = alpha2, y = beta - estimate, color = factor(alpha1))) +
geom_line() +
theme_gdocs() +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(breaks = pretty_breaks(n = 10)) +
labs(x = TeX('$\\alpha_2$'), y = 'Bias') +
guides(color = guide_legend(title = TeX('$\\alpha_1$')))
grid.arrange(g_linear_1, g_linear_2, ncol = 2)
ggsave('bias_linear_confounding_alpha12_20190822.png', dpi = 300, units = 'in', width = 10, height = 8)
g_linear_12 <- grid.arrange(g_linear_1, g_linear_2, ncol = 2)
ggsave('bias_linear_confounding_alpha12_20190822.png', g_linear_12, dpi = 300, units = 'in', width = 10, height = 8)
ggsave('bias_linear_confounding_alpha12_20190822.png', g_linear_12, dpi = 300, units = 'in', width = 12, height = 6)
blogdown::serve_site()
blogdown::serve_site()
strengths <- seq(0, 10, 0.05)
num_rows <- length(strengths)^2
output <- data.frame('beta' = rep(0, num_rows),
'alpha1' = rep(0, num_rows),
'alpha2' = rep(0, num_rows),
'estimate' = rep(0, num_rows))
nrow(output)
for (i in 1:length(strengths)){
for (j in 1:length(strengths)){
n <- 1000
beta <- 1
alpha1 <- strengths[i]
alpha2 <- strengths[j]
w <- rnorm(n, 0, 1)
x <- alpha2*w + rnorm(n, 0, 1)
y <- beta*x + alpha1*w^2 + rnorm(n, 0, 1)
df <- data.frame('y' = y,
'x' = x,
'w' = w)
mod <- lm(y ~ x, data = df)
output[(i-1)*length(strengths) + j, ] <- c(beta, alpha1, alpha2, mod$coefficients[2])
}
}
g_alpha1 <- output %>%
ggplot(aes(x = alpha1, y = alpha2, fill = abs(beta - estimate))) +
geom_tile() +
scale_fill_viridis(option = 'magma') +
scale_x_continuous(breaks = pretty_breaks(n = 20)) +
scale_y_continuous(breaks = pretty_breaks(n = 20)) +
theme_gdocs() +
guides(fill = guide_legend(title="Bias")) +
labs(x = TeX('$\\alpha_1$'), y = TeX('$\\alpha_2$'), title = 'ATE estimate bias due to unobserved quadratic confounding',
subtitle = TeX('The true model is $y = x + \\alpha_1 w^2 + \\epsilon_1$ and $x = \\alpha_2 w + \\epsilon_2$ where $\\epsilon_1$, $\\epsilon_2$ are Gaussian noise with mean 0.'))
g_alpha1
# Simulate an unobserved confounder
require(tidyverse)
require(scales)
require(viridis)
require(latex2exp)
require(ggthemes)
options(scipen = 999)
setwd('~/Desktop/research/')
g_alpha1 <- output %>%
ggplot(aes(x = alpha1, y = alpha2, fill = abs(beta - estimate))) +
geom_tile() +
scale_fill_viridis(option = 'magma') +
scale_x_continuous(breaks = pretty_breaks(n = 20)) +
scale_y_continuous(breaks = pretty_breaks(n = 20)) +
theme_gdocs() +
guides(fill = guide_legend(title="Bias")) +
labs(x = TeX('$\\alpha_1$'), y = TeX('$\\alpha_2$'), title = 'ATE estimate bias due to unobserved quadratic confounding',
subtitle = TeX('The true model is $y = x + \\alpha_1 w^2 + \\epsilon_1$ and $x = \\alpha_2 w + \\epsilon_2$ where $\\epsilon_1$, $\\epsilon_2$ are Gaussian noise with mean 0.'))
g_alpha1
strengths <- seq(0, 10, 0.05)
num_rows <- length(strengths)^2
output <- data.frame('beta' = rep(0, num_rows),
'alpha1' = rep(0, num_rows),
'alpha2' = rep(0, num_rows),
'estimate' = rep(0, num_rows))
nrow(output)
for (i in 1:length(strengths)){
for (j in 1:length(strengths)){
n <- 1000
beta <- 1
alpha1 <- strengths[i]
alpha2 <- strengths[j]
w <- rnorm(n, 0, 1)
x <- alpha2*w^2 + rnorm(n, 0, 1)
y <- beta*x + alpha1*w + rnorm(n, 0, 1)
df <- data.frame('y' = y,
'x' = x,
'w' = w)
mod <- lm(y ~ x, data = df)
output[(i-1)*length(strengths) + j, ] <- c(beta, alpha1, alpha2, mod$coefficients[2])
}
}
g_alpha2 <- output %>%
ggplot(aes(x = alpha1, y = alpha2, fill = abs(beta - estimate))) +
geom_tile() +
scale_fill_viridis(option = 'magma') +
scale_x_continuous(breaks = pretty_breaks(n = 20)) +
scale_y_continuous(breaks = pretty_breaks(n = 20)) +
theme_gdocs() +
guides(fill = guide_legend(title="Bias")) +
labs(x = TeX('$\\alpha_1$'), y = TeX('$\\alpha_2$'), title = 'ATE estimate bias due to unobserved linear confounding',
subtitle = TeX('The true model is $y = x + \\alpha_1 w + \\epsilon_1$ and $x = \\alpha_2 w + \\epsilon_2$ where $\\epsilon_1$, $\\epsilon_2$ are Gaussian noise with mean 0.'))
g_alpha2
g <- grid.arrange(g_alpha1, g_alpha2, ncol = 2)
require(gridExtra)
g <- grid.arrange(g_alpha1, g_alpha2, ncol = 2)
g_alpha2 <- output %>%
ggplot(aes(x = alpha1, y = alpha2, fill = abs(beta - estimate))) +
geom_tile() +
scale_fill_viridis(option = 'magma') +
scale_x_continuous(breaks = pretty_breaks(n = 20)) +
scale_y_continuous(breaks = pretty_breaks(n = 20)) +
theme_gdocs() +
guides(fill = guide_legend(title="Bias")) +
labs(x = TeX('$\\alpha_1$'), y = TeX('$\\alpha_2$'), title = 'ATE estimate bias due to unobserved linear confounding',
subtitle = TeX('The true model is $y = x + \\alpha_1 w + \\epsilon_1$ and $x = \\alpha_2 w^2 + \\epsilon_2$ where $\\epsilon_1$, $\\epsilon_2$ are Gaussian noise with mean 0.'))
g_alpha2
g <- grid.arrange(g_alpha1, g_alpha2, ncol = 2)
ggsave('bias_quadratic_confounding_alpha12_20190822.png', dpi = 300, units = 'in', width = 12, height = 6)
g <- grid.arrange(g_alpha1, g_alpha2, ncol = 2)
ggsave('bias_quadratic_confounding_alpha12_20190822.png', g, dpi = 300, units = 'in', width = 12, height = 6)
ggsave('bias_quadratic_confounding_alpha1_20190822.png', dpi = 300, units = 'in', width = 10, height = 8)
g_alpha1 <- output %>%
ggplot(aes(x = alpha1, y = alpha2, fill = abs(beta - estimate))) +
geom_tile() +
scale_fill_viridis(option = 'magma') +
scale_x_continuous(breaks = pretty_breaks(n = 20)) +
scale_y_continuous(breaks = pretty_breaks(n = 20)) +
theme_gdocs() +
guides(fill = guide_legend(title="Bias")) +
labs(x = TeX('$\\alpha_1$'), y = TeX('$\\alpha_2$'), title = 'ATE estimate bias due to unobserved quadratic confounding',
subtitle = TeX('The true model is $y = x + \\alpha_1 w^2 + \\epsilon_1$ and $x = \\alpha_2 w + \\epsilon_2$ where $\\epsilon_1$, $\\epsilon_2$ are Gaussian noise with mean 0.'))
g_alpha1
ggsave('bias_quadratic_confounding_alpha1_20190822.png', dpi = 300, units = 'in', width = 10, height = 8)
x <- c(rep('A', 20), rep('B', 30), rep('C', 10))
y <- rnorm(60, 0, 1)
